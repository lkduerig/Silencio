// @file
// Custom sass mixins
//
// Define the custom mixins for your project here.
// http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#defining_a_mixin

// see _init for break-points
@mixin respond-to($media){
  @if $media == handheld {
    @media all and (max-width: $break1) { @content; }
  }
  @else if $media == narrow {
    //@media all and (min-width: 481px) and (max-width: 960px) { @content; }
    @media all and (min-width: $break1 + 1) { @content; }
  }
  @else if $media == narrow-only {
    //@media all and (min-width: 481px) and (max-width: 960px) { @content; }
    @media all and (min-width: $break1 + 1) and (max-width: $break2 - 1) { @content; }
  }
  @else if $media == normal {
    //@media all and (min-width: 961px) and (max-width: 1220px) { @content; }
    @media all and (min-width: $break2) { @content; }
  }
}

// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 {
    clip: rect(1px 1px 1px 1px); // IE6 and IE7 use the wrong syntax.
  }
  clip: rect(1px, 1px, 1px, 1px);
}

// Turns off the element-invisible effect.
@mixin element-invisible-off {
  position: static !important;
  clip: auto;
  height: auto;
  width: auto;
  overflow: auto;
}

// Makes an element visually hidden by default, but visible when focused.
@mixin element-focusable {
  @include element-invisible;

  &:active,
  &:focus {
    @include element-invisible-off;
  }
}

// Pseudo element
@mixin fake-element($position: before) {
  position: relative;
  &:#{$position} {
    content: "";
    position: absolute;
    height: 100%;
    width: 100%;
    top: 0;
    @if $position == before {
      left: 0;
    }
    @else if $position == after {
      right: 0;
    }
  }
}